{
  "language": "Solidity",
  "sources": {
    "contracts/librairies/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary FixedPoint {\n  // range: [0, 2**112 - 1]\n  // resolution: 1 / 2**112\n  struct uq112x112 {\n    uint224 _x;\n  }\n\n  // range: [0, 2**144 - 1]\n  // resolution: 1 / 2**112\n  struct uq144x112 {\n    uint256 _x;\n  }\n\n  uint8 private constant RESOLUTION = 112;\n\n  // encode a uint112 as a UQ112x112\n  function encode(uint112 x) internal pure returns (uq112x112 memory) {\n    return uq112x112(uint224(x) << RESOLUTION);\n  }\n\n  // encodes a uint144 as a UQ144x112\n  function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n    return uq144x112(uint256(x) << RESOLUTION);\n  }\n\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\n  function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n    require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n    return uq112x112(self._x / uint224(x));\n  }\n\n  // multiply a UQ112x112 by a uint, returning a UQ144x112\n  // reverts on overflow\n  function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n    uint256 z;\n    require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n    return uq144x112(z);\n  }\n\n  // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n  // equivalent to encode(numerator).div(denominator)\n  function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n    require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n    return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n  }\n\n  // decode a UQ112x112 into a uint112 by truncating after the radix point\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\n    return uint112(self._x >> RESOLUTION);\n  }\n\n  // decode a UQ144x112 into a uint144 by truncating after the radix point\n  function decode144(uq144x112 memory self) internal pure returns (uint144) {\n    return uint144(self._x >> RESOLUTION);\n  }\n}\n"
    },
    "contracts/oracles/adapters/uniswapV2/UniswapV2TWAPOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../../librairies/FixedPoint.sol\";\nimport \"../IPriceOracle.sol\";\n\n/**\nSee https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\nfor the basis for the below contract. ExampleOracleSimple contract has been extended to support tracking multiple\npairs within the same contract.\n*/\n\ncontract UniswapV2TWAPOracle is IPriceOracle, Initializable {\n  using FixedPoint for *;\n\n  uint256 public constant VERSION = 2022021401;\n\n  struct LastValue {\n    address token0;\n    address token1;\n    uint256 price0Cumulative;\n    uint256 price1Cumulative;\n    uint32 blockTimestamp;\n    FixedPoint.uq112x112 price0Average;\n    FixedPoint.uq112x112 price1Average;\n  }\n\n  event UpdatedValues(\n    address indexed pair,\n    FixedPoint.uq112x112 price0Average,\n    FixedPoint.uq112x112 price1Average,\n    uint256 price0Cumulative,\n    uint256 price1Cumulative,\n    uint32 blockTimestamp\n  );\n\n  mapping(IUniswapV2Pair => LastValue) public LAST_VALUES;\n\n  address public TOKEN;\n\n  uint256 public MINIMUM_UPDATE_INTERVAL = 5 minutes;\n\n  /**\n   * @dev sets up the Price Oracle\n   *\n   * @param _inToken the \"target\" token that is paired with FTM/wFTM\n   * @param _minimumUpdateInterval how often to permit updates to the TWAP (seconds)\n   *                               If set to 0, will use the default of 5 minutes\n   */\n  function initialize(address _inToken, uint256 _minimumUpdateInterval) public initializer {\n    require(_inToken != address(0), \"Base Token cannot be null address\");\n    TOKEN = _inToken;\n\n    if (_minimumUpdateInterval != 0) {\n      MINIMUM_UPDATE_INTERVAL = _minimumUpdateInterval;\n    }\n  }\n\n  /****** OPERATIONAL METHODS ******/\n\n  /**\n   * @dev returns the TWAP for the provided pair as of the last update\n   */\n  function getSafePrice(address _pair) public view returns (uint256 _amountOut) {\n    LastValue memory _lastValue = LAST_VALUES[IUniswapV2Pair(_pair)];\n\n    uint256 amountIn = 10**IERC20Metadata(TOKEN).decimals();\n\n    // calculate the value based upon the average cumulative prices\n    // over the time period (TWAP)\n    if (TOKEN == _lastValue.token0) {\n      _amountOut = _lastValue.price0Average.mul(amountIn).decode144();\n    } else {\n      require(TOKEN == _lastValue.token1, \"INVALID PAIR\");\n      _amountOut = _lastValue.price1Average.mul(amountIn).decode144();\n    }\n  }\n\n  /**\n   * @dev returns the current \"unsafe\" price that can be easily manipulated\n   */\n  function getCurrentPrice(address _pair) public view returns (uint256 _amountOut) {\n    IUniswapV2Pair pair = IUniswapV2Pair(_pair);\n\n    (uint256 reserves0, uint256 reserves1, ) = pair.getReserves();\n\n    // simple spot pricing calculation\n    if (TOKEN == pair.token0()) {\n      _amountOut = _divide(reserves1, reserves0, IERC20Metadata(pair.token1()).decimals());\n    } else {\n      require(TOKEN == pair.token1(), \"INVALID PAIR\");\n      _amountOut = _divide(reserves0, reserves1, IERC20Metadata(pair.token0()).decimals());\n    }\n  }\n\n  /**\n   * @dev updates the TWAP (if enough time has lapsed) and returns the current safe price\n   */\n  function updateSafePrice(address pair) public returns (uint256 _amountOut) {\n    // loads the pair if it is not currently tracked\n    _loadPair(IUniswapV2Pair(pair));\n\n    (LastValue memory _lastValue, uint32 timeElapsed) = _getCurrentValues(IUniswapV2Pair(pair));\n\n    // ensure that at least one full MINIMUM_UPDATE_INTERVAL has passed since the last update\n    if (timeElapsed < MINIMUM_UPDATE_INTERVAL) {\n      return getSafePrice(pair);\n    }\n\n    // update the stored record\n    LAST_VALUES[IUniswapV2Pair(pair)] = _lastValue;\n\n    emit UpdatedValues(\n      pair,\n      _lastValue.price0Average,\n      _lastValue.price1Average,\n      _lastValue.price0Cumulative,\n      _lastValue.price1Cumulative,\n      _lastValue.blockTimestamp\n    );\n\n    return getSafePrice(pair);\n  }\n\n  /****** INTERNAL METHODS ******/\n\n  // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n  function _currentBlockTimestamp() internal view returns (uint32) {\n    return uint32(block.timestamp % 2**32);\n  }\n\n  /**\n   * @dev fetches the current cumulative prices for token0 and token1 from the pair\n   */\n  function _currentCumulativePrices(IUniswapV2Pair pair)\n    internal\n    view\n    returns (\n      uint256 price0Cumulative,\n      uint256 price1Cumulative,\n      uint32 blockTimestamp\n    )\n  {\n    blockTimestamp = _currentBlockTimestamp();\n    price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n    price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\n    (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n\n    if (blockTimestampLast != blockTimestamp) {\n      // subtraction overflow is desired\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n      // addition overflow is desired\n      // counterfactual\n      price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n      // counterfactual\n      price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n    }\n  }\n\n  /**\n   * @dev internal method that does quick division using the set precision\n   */\n  function _divide(\n    uint256 a,\n    uint256 b,\n    uint8 precision\n  ) internal pure returns (uint256) {\n    return (a * (10**precision)) / b;\n  }\n\n  /**\n   * @dev retrieves an updated LastValue structure for current pair values\n   * that can be used elsewhere in further calculations\n   */\n  function _getCurrentValues(IUniswapV2Pair pair) internal view returns (LastValue memory, uint32 timeElapsed) {\n    LastValue memory _lastValue = LAST_VALUES[pair];\n\n    (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = _currentCumulativePrices(pair);\n\n    timeElapsed = blockTimestamp - _lastValue.blockTimestamp;\n\n    // avoid divide by 0 error (ie, no time elapsed)\n    if (timeElapsed == 0) {\n      timeElapsed = 1;\n    }\n\n    // overflow is desired, casting never truncates\n    // cumulative price is in (uq112x112 price * seconds) units so we simply wrap\n    // it after division by time elapsed\n    _lastValue.price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - _lastValue.price0Cumulative) / timeElapsed));\n\n    _lastValue.price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - _lastValue.price1Cumulative) / timeElapsed));\n\n    // update values\n    _lastValue.price0Cumulative = price0Cumulative;\n    _lastValue.price1Cumulative = price1Cumulative;\n    _lastValue.blockTimestamp = blockTimestamp;\n\n    return (_lastValue, timeElapsed);\n  }\n\n  /**\n   * @dev checks to see if the pair is known to us, if not, populate the first TWAP entry\n   */\n  function _loadPair(IUniswapV2Pair pair) internal {\n    if (LAST_VALUES[pair].blockTimestamp == 0) {\n      (, , uint32 blockTimestampLast) = pair.getReserves();\n\n      LAST_VALUES[pair] = LastValue({\n        token0: pair.token0(),\n        token1: pair.token1(),\n        price0Cumulative: pair.price0CumulativeLast(),\n        price1Cumulative: pair.price1CumulativeLast(),\n        blockTimestamp: blockTimestampLast,\n        price0Average: type(uint112).min.encode(),\n        price1Average: type(uint112).min.encode()\n      });\n    }\n  }\n\n  function BASE_TOKEN() public view returns (address) {\n    return TOKEN;\n  }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/oracles/adapters/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @dev Oracles should always return un the price in FTM with 18 decimals\ninterface IPriceOracle {\n  /// @dev This method returns a flashloan resistant price.\n  function getSafePrice(address token) external view returns (uint256 _amountOut);\n\n  /// @dev This method has no guarantee on the safety of the price returned. It should only be\n  //used if the price returned does not expose the caller contract to flashloan attacks.\n  function getCurrentPrice(address token) external view returns (uint256 _amountOut);\n\n  /// @dev This method returns a flashloan resistant price, but doesn't\n  //have the view modifier which makes it convenient to update\n  //a uniswap oracle which needs to maintain the TWAP regularly.\n  //You can use this function while doing other state changing tx and\n  //make the callers maintain the oracle.\n  function updateSafePrice(address token) external returns (uint256 _amountOut);\n\n  function VERSION() external view returns (uint256);\n\n  function BASE_TOKEN() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/oracles/adapters/uniswapV2/UniswapV2LPPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../IPriceOracle.sol\";\nimport \"../../IPriceProvider.sol\";\nimport \"../../../RBAC.sol\";\n\ncontract UniswapV2LPPriceOracle is IPriceOracle, RBAC, Initializable {\n  uint256 public constant VERSION = 1;\n  uint256 public constant MAX_SPREAD_BASIS = 100_00;\n  IPriceProvider public priceProvider;\n  uint256 public toleratedSpread;\n\n  event TokenOracleUpdated(address indexed token, address indexed token0Oracle, address indexed token1Oracle);\n  event ToleratedSpreadUpdated(uint256 spread);\n\n  constructor(address _priceProvider) {\n    priceProvider = IPriceProvider(_priceProvider);\n    _setRolesLedger(RBAC(_priceProvider).getRolesLedger());\n  }\n\n  /**\n   * @dev set ratio difference limit\n   */\n  function setToleratedSpread(uint256 _toleratedSpread) external onlyAdmins {\n    require(_toleratedSpread <= MAX_SPREAD_BASIS, \"ULPPO: value needs to be less than 10000\");\n\n    toleratedSpread = _toleratedSpread;\n\n    emit ToleratedSpreadUpdated(toleratedSpread);\n  }\n\n  /****** OPERATIONAL METHODS ******/\n\n  /**\n   * @dev returns the TWAP for the provided pair as of the last update\n   */\n  function getSafePrice(address _lpToken) public view returns (uint256) {\n    return _getLPPrice(_lpToken, true);\n  }\n\n  /**\n   * @dev returns the current \"unsafe\" price that can be easily manipulated\n   */\n  function getCurrentPrice(address _lpToken) external view returns (uint256) {\n    return _getLPPrice(_lpToken, false);\n  }\n\n  /**\n   * @dev updates the TWAP (if enough time has lapsed) and returns the current safe price\n   */\n  function updateSafePrice(address _lpToken) external returns (uint256) {\n    return getSafePrice(_lpToken);\n  }\n\n  // internal functions\n\n  function _getLPPrice(address _lpToken, bool isSafePrice) internal view returns (uint256 price) {\n    ERC20 token0 = ERC20(IUniswapV2Pair(_lpToken).token0());\n    ERC20 token1 = ERC20(IUniswapV2Pair(_lpToken).token1());\n    uint256 price0 = isSafePrice ? priceProvider.getSafePrice(address(token0)) : priceProvider.getCurrentPrice(address(token0));\n    uint256 price1 = isSafePrice ? priceProvider.getSafePrice(address(token1)) : priceProvider.getCurrentPrice(address(token1));\n\n    uint256 totalSupply = IUniswapV2Pair(_lpToken).totalSupply();\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_lpToken).getReserves();\n    uint256 decimal0 = token0.decimals();\n    uint256 decimal1 = token1.decimals();\n\n    reserve0 = (reserve0 * (10**18)) / (10**decimal0);\n    reserve1 = (reserve1 * (10**18)) / (10**decimal1);\n\n    _checkRatio(reserve0, reserve1, price0, price1);\n\n    price = (reserve0 * price0 + reserve1 * price1) / totalSupply;\n  }\n\n  function _checkRatio(\n    uint256 reserve0,\n    uint256 reserve1,\n    uint256 price0,\n    uint256 price1\n  ) internal view {\n    uint256 value0 = reserve0 * price0;\n    uint256 value1 = reserve1 * price1;\n    uint256 diffLimit = (value0 * toleratedSpread) / MAX_SPREAD_BASIS;\n\n    require(value1 < value0 + diffLimit && value0 < value1 + diffLimit, \"ULPPO: spread is greater than tolerated spread\");\n  }\n\n  function BASE_TOKEN() public view returns (address) {\n    return priceProvider.BASE_TOKEN();\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/oracles/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPriceProvider {\n  function getSafePrice(address token) external view returns (uint256);\n\n  function getCurrentPrice(address token) external view returns (uint256);\n\n  function updateSafePrice(address token) external returns (uint256);\n\n  function BASE_TOKEN() external view returns (address);\n}\n"
    },
    "contracts/RBAC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./RolesLedger.sol\";\n\n/**\n * The RBAC let contract implement role based\n * permission using the ExodiaRoles contract.\n * It adds the Machine role on a per contract basis.\n * The Machine role is intended to be used if the contract can only be called from another\n * contract or by a keeper we know the address.\n */\nabstract contract RBAC {\n  RolesLedger public roles;\n  mapping(address => bool) processes;\n\n  function setRolesLedger(address _roles) external onlyAdmins {\n    _setRolesLedger(_roles);\n  }\n\n  function _setRolesLedger(address _roles) internal {\n    require(_roles != address(0), \"roles cannot be null address\");\n    roles = RolesLedger(_roles);\n  }\n\n  function getRolesLedger() external view returns (address) {\n    return address(roles);\n  }\n\n  function _getRoles() internal view returns (RolesLedger) {\n    return roles;\n  }\n\n  function addProcess(address _address) external onlyAdmins {\n    processes[_address] = true;\n  }\n\n  function removeProcess(address _address) external onlyAdmins {\n    processes[_address] = false;\n  }\n\n  function isProcess(address _address) external view returns (bool) {\n    return processes[_address];\n  }\n\n  modifier onlyProcesses() {\n    require(processes[msg.sender], \"RBAC: caller is not a process\");\n    _;\n  }\n\n  function _isAdmin(address _address) internal view returns (bool) {\n    return roles.isAdmin(_address);\n  }\n\n  modifier onlyAdmins() {\n    require(_isAdmin(msg.sender), \"RBAC: caller is not an admin\");\n    _;\n  }\n\n  function _isDaemon(address _address) internal view returns (bool) {\n    return roles.isDaemon(_address);\n  }\n\n  modifier onlyDaemons() {\n    require(_isDaemon(msg.sender), \"RBAC: caller is not a daemon\");\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/RolesLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * RolesLedger is a registry for roles meant to be a singleton\n */\n\ncontract RolesLedger is AccessControl {\n  bytes32 public constant DAEMON = keccak256(\"daemon\");\n  bytes32 public constant ADMIN = keccak256(\"admin\");\n  bytes32 public constant ROOT = DEFAULT_ADMIN_ROLE;\n  address public rootAddress;\n  address public nextRoot;\n\n  event RootPushed(address indexed _from, address indexed _to);\n  event RootPulled(address indexed _from, address indexed _to);\n\n  constructor(address _root) {\n    rootAddress = _root;\n    _grantRole(ROOT, _root);\n  }\n\n  modifier onlyRoot() {\n    require(msg.sender == rootAddress, \"RL: caller is not root\");\n    _;\n  }\n\n  function pushRoot(address _newRoot) external onlyRoot {\n    nextRoot = _newRoot;\n    emit RootPushed(rootAddress, _newRoot);\n  }\n\n  function isRoot(address _address) public view returns (bool) {\n    return hasRole(ROOT, _address);\n  }\n\n  function pullRoot() external {\n    require(msg.sender == nextRoot, \"not next root\");\n    _grantRole(ROOT, nextRoot);\n    _revokeRole(ROOT, rootAddress);\n    emit RootPulled(rootAddress, nextRoot);\n    rootAddress = nextRoot;\n  }\n\n    function isAdmin(address _address) external view returns(bool) {\n        return hasRole(ADMIN, _address);\n    }\n\n    function isDaemon(address _address) external view returns (bool) {\n        return hasRole(DAEMON, _address);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/oracles/PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./adapters/IPriceOracle.sol\";\nimport \"./IPriceProvider.sol\";\nimport \"../RBAC.sol\";\n\nerror NoOracle(address _token);\n\ncontract PriceProvider is IPriceProvider, RBAC {\n  event SetTokenOracle(address token, address oracle);\n  address public immutable BASE_TOKEN;\n  uint8 immutable DECIMALS;\n  mapping(address => address) public priceOracle;\n\n  event PriceUpdated(address indexed _token, uint256 _price);\n\n  /**\n   * @dev sets up the Price Oracle\n   * @param _roles exodia roles address\n   */\n  constructor(\n    address _baseToken,\n    uint8 _decimals,\n    address _roles\n  ) {\n    _setRolesLedger(_roles);\n    DECIMALS = _decimals;\n    BASE_TOKEN = _baseToken;\n  }\n\n  function setTokenOracle(address token, address oracle) external onlyAdmins {\n    priceOracle[token] = oracle;\n\n    emit SetTokenOracle(token, oracle);\n  }\n\n  function getSafePrice(address token) external view override returns (uint256) {\n    return _getSafePrice(token);\n  }\n\n  function _getSafePrice(address token) internal view returns (uint256) {\n    if (token == BASE_TOKEN) {\n      return 10**DECIMALS;\n    }\n    address oracle = priceOracle[token];\n    if (oracle == address(0)) {\n      revert NoOracle(token);\n    }\n    return IPriceOracle(priceOracle[token]).getSafePrice(token);\n  }\n\n  function getSafePriceDenominatedIn(address token0, address token1) external view returns (uint256) {\n    return (_getSafePrice(token0) * 10**DECIMALS) / _getSafePrice(token1);\n  }\n\n  function getCurrentPrice(address token) external view override returns (uint256) {\n    return _getCurrentPrice(token);\n  }\n\n  function _getCurrentPrice(address token) internal view returns (uint256) {\n    if (token == BASE_TOKEN) {\n      return 10**DECIMALS;\n    }\n    address oracle = priceOracle[token];\n    if (oracle == address(0)) {\n      revert NoOracle(token);\n    }\n    return IPriceOracle(priceOracle[token]).getCurrentPrice(token);\n  }\n\n  function getCurrentPriceDenominatedIn(address token0, address token1) external view returns (uint256) {\n    return (_getCurrentPrice(token0) * 10**DECIMALS) / _getCurrentPrice(token1);\n  }\n\n  function updateSafePrice(address token) external override returns (uint256) {\n    if (token == BASE_TOKEN) {\n      return 10**DECIMALS;\n    }\n    address oracle = priceOracle[token];\n    if (oracle == address(0)) {\n      revert NoOracle(token);\n    }\n    uint256 price = IPriceOracle(priceOracle[token]).updateSafePrice(token);\n    emit PriceUpdated(token, price);\n    return price;\n  }\n}\n"
    },
    "contracts/oracles/adapters/balancer/BalV2WeightedPoolLPPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../IPriceOracle.sol\";\nimport \"../../IPriceProvider.sol\";\nimport \"../../interfaces/IBalV2PriceOracle.sol\";\nimport \"../../interfaces/IBalPoolV2.sol\";\nimport \"../../interfaces/IBalVaultV2.sol\";\nimport \"../../../RBAC.sol\";\n\ncontract BalV2WeightedPoolLPPriceOracle is IPriceOracle, RBAC {\n  uint256 public constant VERSION = 1;\n  address public immutable BASE_TOKEN;\n\n  IPriceProvider public priceProvider;\n  uint256 public toleratedSpread;\n  uint256 public constant MAX_SPREAD_BASIS = 100_00;\n\n  event ToleratedSpreadUpdated(uint256 spread);\n\n  /**\n   * @dev sets up the Price Oracle\n   *  @param _priceProvider price provider\n   */\n  constructor(address _priceProvider) {\n    require(_priceProvider != address(0), \"price provider cannot be null address\");\n\n    priceProvider = IPriceProvider(_priceProvider);\n    BASE_TOKEN = priceProvider.BASE_TOKEN();\n    _setRolesLedger(RBAC(_priceProvider).getRolesLedger());\n  }\n\n  /**\n   * @dev set ratio difference limit\n   */\n  function setToleratedSpread(uint256 _spread) external onlyAdmins {\n    require(_spread <= MAX_SPREAD_BASIS, \"BWPLP: invalid spread\");\n\n    toleratedSpread = _spread;\n\n    emit ToleratedSpreadUpdated(_spread);\n  }\n\n  /****** OPERATIONAL METHODS ******/\n\n  /**\n   * @dev returns the TWAP for the provided pair as of the last update\n   */\n  function getSafePrice(address _bpt) public view returns (uint256) {\n    return _getLPPrice(_bpt, true);\n  }\n\n  /**\n   * @dev returns the current \"unsafe\" price that can be easily manipulated\n   */\n  function getCurrentPrice(address _bpt) external view returns (uint256) {\n    return _getLPPrice(_bpt, false);\n  }\n\n  /**\n   * @dev updates the TWAP (if enough time has lapsed) and returns the current safe price\n   */\n  function updateSafePrice(address _bpt) external returns (uint256) {\n    return _getLPPrice(_bpt, true);\n  }\n\n  // internal functions\n\n  function _getTokenSafePrice(address token) internal view returns (uint256 price) {\n    price = 10**18;\n    if (BASE_TOKEN != token) {\n      price = priceProvider.getSafePrice(token);\n    }\n  }\n\n  function _getTokenCurrentPrice(address token) internal view returns (uint256 price) {\n    price = 10**18;\n    if (BASE_TOKEN != token) {\n      price = priceProvider.getCurrentPrice(token);\n    }\n  }\n\n  function _getLPPrice(address _bpt, bool isSafePrice) internal view returns (uint256 price) {\n    IBalPoolV2 pool = IBalPoolV2(_bpt);\n    bytes32 poolId = pool.getPoolId();\n    uint256[] memory weights = pool.getNormalizedWeights();\n    uint256 totalSupply = pool.totalSupply();\n    IBalVaultV2 vault = IBalVaultV2(pool.getVault());\n    (IERC20[] memory tokens, uint256[] memory balances, ) = vault.getPoolTokens(poolId);\n\n    uint256 baseTokenValue = 0;\n    uint256[] memory prices = new uint256[](tokens.length);\n    // update balances in 18 decimals\n    for (uint256 i = 0; i < tokens.length; i++) {\n      balances[i] = (balances[i] * (10**18)) / (10**ERC20(address(tokens[i])).decimals());\n      prices[i] = isSafePrice ? _getTokenSafePrice(address(tokens[i])) : _getTokenCurrentPrice(address(tokens[i]));\n\n      if (i >= 1) {\n        _checkRatio((balances[i - 1] * 10**18) / weights[i - 1], (balances[i] * 10**18) / weights[i], prices[i - 1], prices[i]);\n      }\n\n      baseTokenValue += balances[i] * prices[i];\n    }\n\n    price = baseTokenValue / totalSupply;\n  }\n\n  function _checkRatio(\n    uint256 reserve0,\n    uint256 reserve1,\n    uint256 price0,\n    uint256 price1\n  ) internal view {\n    uint256 value0 = reserve0 * price0;\n    uint256 value1 = reserve1 * price1;\n    uint256 diffLimit = (value0 * toleratedSpread) / MAX_SPREAD_BASIS;\n\n    require(value1 < value0 + diffLimit && value0 < value1 + diffLimit, \"BWPLPPO: spread threshold reached\");\n  }\n}\n"
    },
    "contracts/oracles/interfaces/IBalV2PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\ninterface IBalV2PriceOracle {\n  // The three values that can be queried:\n  //\n  // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\n  //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\n  //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\n  //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\n  //\n  // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\n  //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\n  //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\n  //\n  // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\n  enum TWAP_VALUE {\n    PAIR_PRICE,\n    BPT_PRICE,\n    INVARIANT\n  }\n\n  struct OracleAverageQuery {\n    TWAP_VALUE variable;\n    uint256 secs;\n    uint256 ago;\n  }\n\n  /**\n   * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\n   * decimal fixed point values.\n   */\n  function getTimeWeightedAverage(OracleAverageQuery[] memory queries) external view returns (uint256[] memory results);\n\n  /**\n   * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\n   */\n  function getLatest(TWAP_VALUE variable) external view returns (uint256);\n}\n"
    },
    "contracts/oracles/interfaces/IBalPoolV2.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.6.12;\n\ninterface IBalPoolV2 {\n  function getNormalizedWeights() external view returns (uint256[] memory);\n\n  function totalSupply() external view returns (uint256);\n\n  function getPoolId() external view returns (bytes32);\n\n  function getVault() external view returns (address);\n}\n"
    },
    "contracts/oracles/interfaces/IBalVaultV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBalVaultV2 {\n  function getPoolTokens(bytes32 poolId)\n    external\n    view\n    returns (\n      IERC20[] memory tokens,\n      uint256[] memory balances,\n      uint256 lastChangeBlock\n    );\n}\n"
    },
    "contracts/oracles/adapters/balancer/fBEETSPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/IBalV2PriceOracle.sol\";\nimport \"../IPriceOracle.sol\";\n\ninterface IFBeets {\n  function vestingToken() external view returns (address);\n}\n\ncontract fBEETSPriceOracle is IPriceOracle {\n  using Address for address;\n\n  address vestingToken;\n  address fBeetsBar;\n  address public immutable BASE_TOKEN;\n\n  constructor(address _fBeetsBar, address _baseToken) {\n    require(_fBeetsBar.isContract(), \"fBeetsBar is not a contract\");\n    fBeetsBar = _fBeetsBar;\n    vestingToken = IFBeets(_fBeetsBar).vestingToken();\n    BASE_TOKEN = _baseToken;\n  }\n\n  // _token only needed for IPriceOracle\n\n  function updateSafePrice(address _token) public returns (uint256) {\n    return _getSafePrice();\n  }\n\n  // _token only needed for IPriceOracle\n\n  function getSafePrice(address _token) public view returns (uint256) {\n    return _getSafePrice();\n  }\n\n  // _token only needed for IPriceOracle\n\n  function getCurrentPrice(address _token) public view returns (uint256) {\n    return _getSafePrice();\n  }\n\n  function description() external pure returns (string memory) {\n    return \"Oracle using balancer TWAP and fBEETS index\";\n  }\n\n  function VERSION() external view returns (uint256) {\n    return uint256(1);\n  }\n\n  function _getSafePrice() internal view returns (uint256) {\n    IBalV2PriceOracle.OracleAverageQuery[] memory query = new IBalV2PriceOracle.OracleAverageQuery[](1);\n    query[0] = IBalV2PriceOracle.OracleAverageQuery(IBalV2PriceOracle.TWAP_VALUE.BPT_PRICE, 120, 10);\n    uint256[] memory prices = IBalV2PriceOracle(vestingToken).getTimeWeightedAverage(query);\n    uint256 bptFtm = prices[0];\n    uint256 fBeetsTotalSupply = IERC20(fBeetsBar).totalSupply();\n    uint256 vestingTokenLocked = IERC20(vestingToken).balanceOf(fBeetsBar);\n    uint256 bptFBeetsRatio = (vestingTokenLocked * 1e18) / fBeetsTotalSupply;\n    uint256 price = (bptFtm * bptFBeetsRatio) / 1e18;\n    return price;\n  }\n}\n"
    },
    "contracts/oracles/adapters/balancer/BalV2PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../IPriceOracle.sol\";\nimport \"../../interfaces/IBalV2PriceOracle.sol\";\nimport \"../../interfaces/IBalVaultV2.sol\";\nimport \"../../interfaces/IBalPoolV2.sol\";\nimport \"../../IPriceProvider.sol\";\nimport \"../../../RBAC.sol\";\n\n\ncontract BalV2PriceOracle is IPriceOracle, RBAC {\n  uint256 public constant VERSION = 1;\n\n  IPriceProvider public priceProvider;\n  address public immutable vault;\n  uint256 public timeLength = 5 minutes;\n  uint256 public lastSample = 3 minutes;\n  mapping(address => address) public tokenPools; // token => balancer pool\n\n  event SetTokenOracle(address indexed token, address indexed tokenPool);\n\n  /**\n   * @dev sets up the Price Oracle\n   * @param _priceProvider price provider to get the BASE_TOKEN and Roles Ledger\n   * @param _vault balancer vault address\n   * @param _timeLength how long is the twap taken on in seconds\n   * @param _lastSample when is the last sample used\n   */\n  constructor(\n    address _priceProvider,\n    address _vault,\n    uint256 _timeLength,\n    uint256 _lastSample\n  ) {\n    require(_vault != address(0), \"vault cannot be null address\");\n    _setRolesLedger(RBAC(_priceProvider).getRolesLedger());\n    priceProvider = IPriceProvider(_priceProvider);\n    vault = _vault;\n    timeLength = _timeLength;\n    lastSample = _lastSample;\n  }\n\n  /**\n   * @dev add/update token oracle setting\n   */\n  function setTokenOracle(address _token, address _tokenPool) external onlyAdmins {\n    bytes32 poolId = IBalPoolV2(_tokenPool).getPoolId();\n    (IERC20[] memory tokens, , ) = IBalVaultV2(vault).getPoolTokens(poolId);\n\n    // Balancer oracle is only available for 2 token pools\n    require(tokens.length == 2, \"INVALID POOL\");\n    // Verify that the LP has the target token\n    require(_token != priceProvider.BASE_TOKEN() && (_token == address(tokens[0]) || _token == address(tokens[1])), \"Token is not in pool\");\n    tokenPools[_token] = _tokenPool;\n\n    emit SetTokenOracle(_token, _tokenPool);\n  }\n\n  /****** OPERATIONAL METHODS ******/\n\n  /**\n   * @dev returns the TWAP for the provided pair as of the last update\n   */\n  function getSafePrice(address _token) public view returns (uint256) {\n    require(tokenPools[_token] != address(0), \"BPO: unkown token\");\n    IBalV2PriceOracle.OracleAverageQuery[] memory queries = new IBalV2PriceOracle.OracleAverageQuery[](1);\n    queries[0] = IBalV2PriceOracle.OracleAverageQuery(IBalV2PriceOracle.TWAP_VALUE.PAIR_PRICE, timeLength, lastSample);\n    uint256[] memory prices = IBalV2PriceOracle(tokenPools[_token]).getTimeWeightedAverage(queries);\n    uint256 tokenPairPrice = prices[0];\n    bytes32 poolId = IBalPoolV2(tokenPools[_token]).getPoolId();\n    (IERC20[] memory tokens, , ) = IBalVaultV2(vault).getPoolTokens(poolId);\n    if (_token == address(tokens[0])) {\n      return (priceProvider.getSafePrice(address(tokens[1])) * (10**18)) / tokenPairPrice;\n    }\n    return (priceProvider.getSafePrice(address(tokens[0])) * tokenPairPrice) / (10**18);\n  }\n\n  /**\n   * @dev returns the current \"unsafe\" price that can be easily manipulated\n   */\n  function getCurrentPrice(address _token) external view returns (uint256 price) {\n    require(tokenPools[_token] != address(0), \"BPO: unkown token\");\n    // TODO: refactor with\n    // uint256[] memory prices = IBalV2PriceOracle(tokenPools[_token]).getLatest(IBalV2PriceOracle.TWAP_VALUE.PAIR_PRICE);\n    bytes32 poolId = IBalPoolV2(tokenPools[_token]).getPoolId();\n    uint256[] memory weights = IBalPoolV2(tokenPools[_token]).getNormalizedWeights();\n    (IERC20[] memory tokens, uint256[] memory balances, ) = IBalVaultV2(vault).getPoolTokens(poolId);\n\n    if (_token == address(tokens[0])) {\n      price = _tokenPriceFromWeights(tokens[0], tokens[1], balances[0], balances[1], weights[0], weights[1]);\n    } else if (_token == address(tokens[1])) {\n      price = _tokenPriceFromWeights(tokens[1], tokens[0], balances[1], balances[0], weights[1], weights[0]);\n    }\n  }\n\n  /**\n   * @dev updates the TWAP (if enough time has lapsed) and returns the current safe price\n   */\n  function updateSafePrice(address _token) external returns (uint256) {\n    return getSafePrice(_token);\n  }\n\n  // internal functions\n\n  /**\n   * @dev return token price (token0/token1)\n   */\n  function _tokenPriceFromWeights(\n    IERC20 token0,\n    IERC20 token1,\n    uint256 balance0,\n    uint256 balance1,\n    uint256 weight0,\n    uint256 weight1\n  ) internal view returns (uint256) {\n    uint256 price1 = priceProvider.getCurrentPrice(address(token1));\n\n    // price = balance1 / balance0 * weight0 / weight1 * usdPrice1\n    // TVL = balance0\n    // in denominated token price decimals\n    uint256 assetValue = (balance1 * price1) / (10**ERC20(address(token1)).decimals());\n    // in denominated token price decimals\n    return (assetValue * weight0 * (10**ERC20(address(token0)).decimals())) / weight1 / balance0;\n  }\n\n  function BASE_TOKEN() public view returns (address) {\n    return priceProvider.BASE_TOKEN();\n  }\n}\n"
    },
    "contracts/oracles/adapters/Solidly/SolidlyTWAPOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/SolidlyBaseV1Pair.sol\";\nimport \"../IPriceOracle.sol\";\nimport \"../../PriceProvider.sol\";\n\ncontract SolidlyTWAPOracle is IPriceOracle, RBAC {\n  mapping(address => SolidlyBaseV1Pair) public pairForToken;\n  address public immutable BASE_TOKEN;\n  IPriceProvider priceProvider;\n\n  constructor(address _priceProvider) {\n    _setRolesLedger(RBAC(_priceProvider).getRolesLedger());\n    priceProvider = IPriceProvider(_priceProvider);\n    BASE_TOKEN = priceProvider.BASE_TOKEN();\n  }\n\n  function setPair(address _token, address _pair) external onlyAdmins {\n    pairForToken[_token] = SolidlyBaseV1Pair(_pair);\n  }\n\n  function getSafePrice(address _token) public view returns (uint256) {\n    SolidlyBaseV1Pair pair = pairForToken[_token];\n    uint256 amountOut = pair.current(_token, 10**ERC20(_token).decimals());\n    if (_token == pair.token0()) {\n      return _basePrice(pair.token1(), amountOut);\n    }\n    return _basePrice(pair.token0(), amountOut);\n  }\n\n  function _basePrice(address _token, uint256 _amount) internal view returns (uint256) {\n    if (_token == BASE_TOKEN) {\n      return _amount;\n    }\n    return (_amount * priceProvider.getSafePrice(_token)) / 10**ERC20(_token).decimals();\n  }\n\n  function getCurrentPrice(address _token) external view returns (uint256 _amountOut) {\n    return getSafePrice(_token);\n  }\n\n  function updateSafePrice(address _token) external returns (uint256 _amountOut) {\n    return getSafePrice(_token);\n  }\n\n  function VERSION() external view returns (uint256) {\n    return 1;\n  }\n}\n"
    },
    "contracts/oracles/interfaces/SolidlyBaseV1Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\ninterface SolidlyBaseV1Pair is IUniswapV2Pair {\n  function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\n\n  function quote(\n    address tokenIn,\n    uint256 amountIn,\n    uint256 granularity\n  ) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/oracles/adapters/chainlink/ChainlinkPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../IPriceOracle.sol\";\nimport \"../../../RBAC.sol\";\n\ncontract ChainlinkPriceOracle is IPriceOracle, RBAC {\n  uint256 public constant VERSION = 1;\n\n  address public BASE_PRICE_FEED;\n  address public immutable BASE_TOKEN;\n\n  uint8 public decimals = 18;\n\n  mapping(address => address) public priceFeed; // token => chainlink price feed\n\n  event UpdateValues(address indexed feed);\n  event OutputDecimalsUpdated(uint8 _old, uint8 _new);\n  event SetPriceFeed(address indexed token, address indexed feed);\n\n  constructor(\n    address _roles,\n    address _base_price_feed,\n    address _baseToken\n  ) {\n    require(_base_price_feed != address(0), \"CLPO: BASE PRICE FEED cannot be the null address\");\n    BASE_TOKEN = _baseToken;\n    BASE_PRICE_FEED = _base_price_feed;\n    _setRolesLedger(_roles);\n  }\n\n  function setPriceFeed(address _token, address _feed) external onlyAdmins {\n    priceFeed[_token] = _feed;\n\n    emit SetPriceFeed(_token, _feed);\n  }\n\n  function getSafePrice(address _token) public view returns (uint256 _amountOut) {\n    return getCurrentPrice(_token);\n  }\n\n  function getCurrentPrice(address _token) public view returns (uint256 _amountOut) {\n    require(priceFeed[_token] != address(0), \"CLPO: no price feed\");\n\n    _amountOut = _divide(_feedPrice(priceFeed[_token]), _feedPrice(BASE_PRICE_FEED), decimals);\n  }\n\n  function setOutputDecimals(uint8 _decimals) public onlyAdmins {\n    uint8 _old = _decimals;\n    decimals = _decimals;\n    emit OutputDecimalsUpdated(_old, _decimals);\n  }\n\n  function updateSafePrice(address _feed) public returns (uint256 _amountOut) {\n    emit UpdateValues(_feed); // keeps this mutable so it matches the interface\n\n    return getCurrentPrice(_feed);\n  }\n\n  /****** INTERNAL METHODS ******/\n\n  /**\n   * @dev internal method that does quick division using the set precision\n   */\n  function _divide(\n    uint256 a,\n    uint256 b,\n    uint8 precision\n  ) internal pure returns (uint256) {\n    return (a * (10**precision)) / b;\n  }\n\n  function _feedPrice(address _feed) internal view returns (uint256 latestUSD) {\n    (, int256 _latestUSD, , , ) = AggregatorV3Interface(_feed).latestRoundData();\n    return uint256(_latestUSD);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/oracles/adapters/chainlink/GOHMPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"../IPriceOracle.sol\";\n\ncontract GOHMPriceOracle is IPriceOracle {\n  AggregatorV3Interface immutable ohmFeed;\n  AggregatorV3Interface immutable indexFeed;\n  AggregatorV3Interface immutable baseFeed;\n  address public immutable BASE_TOKEN;\n\n  event UpdateValues(address indexed feed);\n\n  constructor(\n    address _ohmFeed,\n    address _indexFeed,\n    address _baseFeed,\n    address _baseToken\n  ) {\n    ohmFeed = AggregatorV3Interface(_ohmFeed);\n    indexFeed = AggregatorV3Interface(_indexFeed);\n    baseFeed = AggregatorV3Interface(_baseFeed);\n    BASE_TOKEN = _baseToken;\n  }\n\n  function getSafePrice(address _token) public view returns (uint256) {\n    return getCurrentPrice(_token);\n  }\n\n  function getCurrentPrice(address _token) public view returns (uint256) {\n    (, int256 ohmUsd, , , ) = ohmFeed.latestRoundData();\n    (, int256 index, , , ) = indexFeed.latestRoundData();\n    (, int256 baseUsd, , , ) = baseFeed.latestRoundData();\n    return (uint256(ohmUsd) * uint256(index) * 1e9) / uint256(baseUsd);\n  }\n\n  function updateSafePrice(address _feed) public returns (uint256) {\n    emit UpdateValues(_feed); // keeps this mutable so it matches the interface\n    return getCurrentPrice(_feed);\n  }\n\n  function VERSION() external view returns (uint256) {\n    return 1;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}